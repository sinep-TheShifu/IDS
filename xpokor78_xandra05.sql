-----------------------------------
-- Projekt IDS 2020 cast 4
-- Matej Pokorny a Daniel Andrasko
-- xpokor78 a xandra05
---------------------------------------
-- ZRUSENI TABULEK POKUD JIZ EXISTUJI
---------------------------------------

DROP TABLE akce CASCADE CONSTRAINTS;
DROP TABLE akce_na_stene CASCADE CONSTRAINTS;
DROP TABLE album_fotek CASCADE CONSTRAINTS;
DROP TABLE clovek_v_konverzaci CASCADE CONSTRAINTS;
DROP TABLE fotografie CASCADE CONSTRAINTS;
DROP TABLE je_oznacen CASCADE CONSTRAINTS;
DROP TABLE je_pritelem CASCADE CONSTRAINTS;
DROP TABLE konverzace CASCADE CONSTRAINTS;
DROP TABLE porada CASCADE CONSTRAINTS;
DROP TABLE prispevek CASCADE CONSTRAINTS;
DROP TABLE prispevek_na_stene CASCADE CONSTRAINTS;
DROP TABLE profilova_fotografie CASCADE CONSTRAINTS;
DROP TABLE spravce CASCADE CONSTRAINTS;
DROP TABLE uzivatel CASCADE CONSTRAINTS;
DROP TABLE zprava CASCADE CONSTRAINTS;
DROP TABLE zprava_v_konverzaci CASCADE CONSTRAINTS;
DROP TABLE zucastni_se CASCADE CONSTRAINTS;

------------------------------------------------
-- VYTVORENI TABULEK A PRIDANI PRIMARNICH KLICU
------------------------------------------------

CREATE TABLE akce (
    id                   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nazev                CHAR(50),
    misto                CHAR(30),
    cas                  TIMESTAMP WITH LOCAL TIME ZONE,
    spravce_rodne_cislo  NUMBER
);

ALTER TABLE akce ADD CONSTRAINT akce_pk PRIMARY KEY ( id );

CREATE TABLE akce_na_stene (
    uzivatel_id  NUMBER NOT NULL,
    akce_id      NUMBER NOT NULL
);

ALTER TABLE akce_na_stene ADD CONSTRAINT akce_na_stene_pk PRIMARY KEY ( uzivatel_id, akce_id );

CREATE TABLE album_fotek (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nazev          CHAR(20),
    fotografie_id  NUMBER NOT NULL
);

ALTER TABLE album_fotek ADD CONSTRAINT album_fotek_pk PRIMARY KEY ( id );

CREATE TABLE clovek_v_konverzaci (
    uzivatel_id    NUMBER NOT NULL,
    konverzace_id  NUMBER NOT NULL
);

ALTER TABLE clovek_v_konverzaci ADD CONSTRAINT clovek_v_konverzaci_pk PRIMARY KEY ( uzivatel_id, konverzace_id );

CREATE TABLE fotografie (
    id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    obrazek  BLOB,
    akce_id  NUMBER NOT NULL
);

ALTER TABLE fotografie ADD CONSTRAINT fotografie_pk PRIMARY KEY ( id );

CREATE TABLE je_oznacen (
    uzivatel_id   NUMBER NOT NULL,
    prispevek_id  NUMBER NOT NULL
);

ALTER TABLE je_oznacen ADD CONSTRAINT je_onacen_pk PRIMARY KEY ( uzivatel_id, prispevek_id );

CREATE TABLE je_pritelem (
    uzivatel_id1  NUMBER NOT NULL,
    uzivatel_id2  NUMBER NOT NULL
);

ALTER TABLE je_pritelem ADD CONSTRAINT je_pritelem_pk PRIMARY KEY ( uzivatel_id1, uzivatel_id2 );

CREATE TABLE konverzace (
    id     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nazev  CHAR(30)
);

ALTER TABLE konverzace ADD CONSTRAINT konverzace_pk PRIMARY KEY ( id );

CREATE TABLE porada (
    uzivatel_id  NUMBER NOT NULL,
    akce_id      NUMBER NOT NULL
);

ALTER TABLE porada ADD CONSTRAINT porada_pk PRIMARY KEY ( uzivatel_id, akce_id );

CREATE TABLE prispevek (
    id                   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    cas_sdileni          TIMESTAMP WITH LOCAL TIME ZONE,
    popis                CHAR(150),
    misto_sdileni        CHAR(20),
    nastaveni_soukromi   CHAR(10),
    spravce_rodne_cislo  NUMBER,
    uzivatel_id          NUMBER NOT NULL
);

ALTER TABLE prispevek ADD CONSTRAINT prispevek_pk PRIMARY KEY ( id );

CREATE TABLE prispevek_na_stene (
    uzivatel_id   NUMBER NOT NULL,
    prispevek_id  NUMBER NOT NULL
);

ALTER TABLE prispevek_na_stene ADD CONSTRAINT prispevek_na_stene_pk PRIMARY KEY ( uzivatel_id, prispevek_id );

CREATE TABLE profilova_fotografie(
    uzivatel_id         NUMBER NOT NULL,
    fotografie_id       NUMBER NOT NULL
);

ALTER TABLE profilova_fotografie ADD CONSTRAINT profilova_fotografie_pk PRIMARY KEY ( uzivatel_id, fotografie_id );

CREATE TABLE spravce (
    rodne_cislo      NUMBER CHECK(MOD(rodne_cislo, 11)=0),
    jmeno            CHAR(20),
    prijmeni         CHAR(20),
    telefon          CHAR(15),
    email            CHAR(40),
    ulice            CHAR(40),
    cislo_domu       CHAR(15),
    smerovaci_cislo  NUMBER,
    mesto            CHAR(30),
    zeme             CHAR(30),
    pravomoc         CHAR(15)
);

ALTER TABLE spravce ADD CONSTRAINT spravce_pk PRIMARY KEY ( rodne_cislo );

CREATE TABLE uzivatel (
    id                    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    jmeno                 CHAR(20 CHAR) NOT NULL,
    prijmeni              CHAR(20 CHAR) NOT NULL,
    email                 CHAR(40 CHAR) NOT NULL,
    datum_narozeni        DATE,
    datum_vytvoreni_uctu  DATE NOT NULL,
    dosazene_vzdelani     CHAR(10 CHAR),
    zamestnani            CHAR(30 CHAR),
    zadany                NUMBER,
    rodne_cislo           NUMBER CHECK(MOD(rodne_cislo, 11)=0),
    ulice                 CHAR(40),
    cislo_domu            CHAR(20),
    smerovaci_cislo       NUMBER,
    mesto                 CHAR(30),
    zeme                  CHAR(30),
    telefon               CHAR(15)
);

ALTER TABLE uzivatel ADD CONSTRAINT uzivatel_pk PRIMARY KEY ( id );

CREATE TABLE zprava (
    id                              NUMBER,
    cas_odeslani                    TIMESTAMP WITH LOCAL TIME ZONE,
    misto_odeslani                  CHAR(30),
    obsah                           CHAR(150),
    spravce_rodne_cislo_odeslal     NUMBER,
    spravce_rodne_cislo_odstranil   NUMBER,
    uzivatel_id                     NUMBER NOT NULL
);

ALTER TABLE zprava ADD CONSTRAINT zprava_pk PRIMARY KEY ( id );

CREATE TABLE zprava_v_konverzaci (
    konverzace_id  NUMBER NOT NULL,
    zprava_pk      NUMBER NOT NULL
);

ALTER TABLE zprava_v_konverzaci ADD CONSTRAINT zprava_v_konverzaci_pk PRIMARY KEY ( konverzace_id, zprava_pk );

CREATE TABLE zucastni_se (
    uzivatel_id  NUMBER NOT NULL,
    akce_id      NUMBER NOT NULL
);

ALTER TABLE zucastni_se ADD CONSTRAINT zucastni_se_pk PRIMARY KEY ( uzivatel_id, akce_id );

------------------------------------------------
-- PRIDANI CIZICH KLICU
------------------------------------------------


ALTER TABLE akce ADD CONSTRAINT akce_spravce_fk FOREIGN KEY ( spravce_rodne_cislo ) REFERENCES spravce ( rodne_cislo );

ALTER TABLE album_fotek ADD CONSTRAINT album_fotek_fotografie_fk FOREIGN KEY ( fotografie_id ) REFERENCES fotografie ( id );
ALTER TABLE album_fotek ADD CONSTRAINT album_fotek_prispevek_fk FOREIGN KEY ( id ) REFERENCES prispevek ( id );

ALTER TABLE fotografie ADD CONSTRAINT fotografie_akce_fk FOREIGN KEY ( akce_id ) REFERENCES akce ( id );
ALTER TABLE fotografie ADD CONSTRAINT fotografie_prispevek_fk FOREIGN KEY ( id ) REFERENCES prispevek ( id );

ALTER TABLE je_oznacen ADD CONSTRAINT je_oznacen_prispevek_fk FOREIGN KEY ( prispevek_id ) REFERENCES prispevek ( id );
ALTER TABLE je_oznacen ADD CONSTRAINT je_oznacen_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE je_pritelem ADD CONSTRAINT je_pritelem_uzivatel1_fk FOREIGN KEY ( uzivatel_id1 ) REFERENCES uzivatel ( id );
ALTER TABLE je_pritelem ADD CONSTRAINT je_pritelem_uzivatel2_fk FOREIGN KEY ( uzivatel_id2 ) REFERENCES uzivatel ( id );

ALTER TABLE clovek_v_konverzaci ADD CONSTRAINT clovek_v_konverzaci_konverzace_fk FOREIGN KEY ( konverzace_id ) REFERENCES konverzace ( id );
ALTER TABLE clovek_v_konverzaci ADD CONSTRAINT clovek_v_konverzaci_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE zprava_v_konverzaci ADD CONSTRAINT zprava_v_konverzaci_konverzace_fk FOREIGN KEY ( konverzace_id ) REFERENCES konverzace ( id );
ALTER TABLE zprava_v_konverzaci ADD CONSTRAINT zprava_v_konverzaci_zprava_fk FOREIGN KEY ( zprava_pk ) REFERENCES zprava ( id );

ALTER TABLE porada ADD CONSTRAINT porada_akce_fk FOREIGN KEY ( akce_id ) REFERENCES akce ( id );
ALTER TABLE porada ADD CONSTRAINT porada_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE prispevek ADD CONSTRAINT prispevek_spravce_fk FOREIGN KEY ( spravce_rodne_cislo )  REFERENCES spravce ( rodne_cislo );
ALTER TABLE prispevek ADD CONSTRAINT prispevek_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE prispevek_na_stene ADD CONSTRAINT prispevek_na_stene_prispevek_fk FOREIGN KEY ( prispevek_id ) REFERENCES prispevek ( id );
ALTER TABLE prispevek_na_stene ADD CONSTRAINT prispevek_na_stene_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE profilova_fotografie ADD CONSTRAINT profilova_fotografie_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );
ALTER TABLE profilova_fotografie ADD CONSTRAINT profilova_fotografie_fotografie_fk FOREIGN KEY ( fotografie_id ) REFERENCES fotografie ( id );

ALTER TABLE akce_na_stene ADD CONSTRAINT akce_na_stene_akce_fk FOREIGN KEY ( akce_id ) REFERENCES akce ( id );
ALTER TABLE akce_na_stene ADD CONSTRAINT akce_na_stene_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE zprava ADD CONSTRAINT zprava_spravce_odeslal_fk FOREIGN KEY ( spravce_rodne_cislo_odeslal ) REFERENCES spravce ( rodne_cislo );
ALTER TABLE zprava ADD CONSTRAINT zprava_spravce_odstranil_fk FOREIGN KEY ( spravce_rodne_cislo_odstranil ) REFERENCES spravce ( rodne_cislo );
ALTER TABLE zprava ADD CONSTRAINT zprava_uzivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

ALTER TABLE zucastni_se ADD CONSTRAINT zucastni_se_akce_fk FOREIGN KEY ( akce_id ) REFERENCES akce ( id );
ALTER TABLE zucastni_se ADD CONSTRAINT zucastni_se_u≈æivatel_fk FOREIGN KEY ( uzivatel_id ) REFERENCES uzivatel ( id );

--------------------------------------------
-- PRIDANI VZOROVYCH DAT
--------------------------------------------

-- TRIGGER --------------------------------------
-- trigger generuje cisla a cisluje s nimi vlozene nove zpravy, ostatni tabulky se cisluji pomoci identity
DROP SEQUENCE cislo_zpravy;

CREATE SEQUENCE cislo_zpravy
    start with 1 increment by 1;

CREATE OR REPLACE TRIGGER ocisluj_zpravu
    BEFORE INSERT ON zprava
    FOR EACH ROW
BEGIN
    IF(:new.id IS NULL) THEN
        :new.id := cislo_zpravy.nextval;
    END IF;
END;
/
-------------------------------------------------
-------------------------------------------------


INSERT INTO spravce(rodne_cislo, jmeno, prijmeni, telefon, email, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, pravomoc)
VALUES('8806021114', 'Jan', 'Novak', '+420 255 542', 'jan.novak@stud.fit.vutbr.cz', 'Jahodna', '4/2', '0096', 'Brno', 'Ceska Republika', 'admin');
INSERT INTO spravce(rodne_cislo, jmeno, prijmeni, telefon, email, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, pravomoc)
VALUES('8806021125', 'Jan', 'Novak', '+420 255 542', 'jan.novak@stud.fit.vutbr.cz', 'Jahodna', '4/2', '0001', 'Brno', 'Ceska Republika', 'admin');
INSERT INTO spravce(rodne_cislo, jmeno, prijmeni, telefon, email, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, pravomoc)
VALUES('8806021136', 'Jan', 'Novak', '+420 255 542', 'jan.novak@stud.fit.vutbr.cz', 'Jahodna', '4/2', '0325', 'Brno', 'Slovenska Republika', 'admin');

INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
VALUES(NULL, 'Pepa', 'Nov√°k', 'josev.novak@gmail.com', TIMESTAMP '1990-06-03 00:00:00', TIMESTAMP '2020-03-22 11:15:50', 'Maturita', 'Student', '0', '9206031109', 'Novakova', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');
INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
VALUES(NULL, 'Lukas', 'Pataj', 'lukas.pataj@seznam.cz', TIMESTAMP '1980-05-01 00:00:00', TIMESTAMP '2020-03-20 09:11:05', 'Zakladne', 'Nezamestnany', '0', NULL, 'Stavebna', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');
INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
VALUES(NULL, 'Lukas', 'Pataj', 'lukas.pataj@seznam.cz', TIMESTAMP '1980-05-01 00:00:00', TIMESTAMP '2020-03-20 09:11:05', 'Zakladne', 'Nezamestnany', '0', NULL, 'Stavebna', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');
INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
VALUES(NULL, 'Pepa', 'Pataj', 'lukas.pataj@seznam.cz', TIMESTAMP '1980-05-01 00:00:00', TIMESTAMP '2020-03-20 09:11:05', 'Zakladne', 'Student', '0', NULL, 'Stavebna', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');
INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
VALUES(NULL, 'Peter', 'Pataj', 'lukas.pataj@seznam.cz', TIMESTAMP '1980-05-01 00:00:00', TIMESTAMP '2020-03-20 09:11:05', 'Zakladne', 'Nezamestnany', '0', NULL, 'Stavebna', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');



INSERT INTO akce(id, nazev, misto, cas, spravce_rodne_cislo) VALUES(NULL, 'Soutez v rychlosti psani SQL kodu','Brno', TIMESTAMP '2020-07-31 12:00:00.00', NULL);

INSERT INTO prispevek(id, cas_sdileni, popis, misto_sdileni, nastaveni_soukromi, spravce_rodne_cislo, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-31 12:00:00.00', 'Prispevek', 'Brno', 'Pratele', NULL, 2);
INSERT INTO prispevek(id, cas_sdileni, popis, misto_sdileni, nastaveni_soukromi, spravce_rodne_cislo, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-06-28 12:00:00.00', 'Prispevek 2', 'Brno', 'Vsichni', NULL, 2);

INSERT INTO fotografie(id, obrazek, akce_id) VALUES(NULL, utl_raw.cast_to_raw('www.obrazek.cz/picture'), 1);

INSERT INTO profilova_fotografie(uzivatel_id, fotografie_id) VALUES(1,1);
INSERT INTO profilova_fotografie(uzivatel_id, fotografie_id) VALUES(2,1);

INSERT INTO prispevek(id, cas_sdileni, popis, misto_sdileni, nastaveni_soukromi, spravce_rodne_cislo, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-05-22 08:00:00.00', 'Toto jsou nase fotky z dovolene', 'Alpy', 'Pratele', NULL, 2);
INSERT INTO prispevek(id, cas_sdileni, popis, misto_sdileni, nastaveni_soukromi, spravce_rodne_cislo, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-05-22 08:00:00.00', 'Toto jsou nase fotky z dovolene', 'Alpy', 'Pratele', NULL, 3);

INSERT INTO album_fotek(id, nazev, fotografie_id) VALUES(NULL, 'Fotky z dovolene', 1);

INSERT INTO konverzace(id, nazev) VALUES(NULL, 'Konverzacia IDS');
INSERT INTO konverzace(id, nazev) VALUES(NULL, 'Konverzace IPP');

INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-31 12:00:00.00', 'Brno', 'Ahoj, ako sa mas?', 8806021114, NULL, 1);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-31 18:27:00.00', 'Olomouc', 'Robis na projekte z IDS?', NULL, NULL, 1);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-31 03:09:00.00', 'Praha', 'Spis?', NULL, NULL, 1);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Ne neudelal jsem to..', NULL, NULL, 2);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 16:30:00.00', 'Brno', 'Jo, uz jsem byl v obchode', NULL, NULL, 3);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Co delas?', NULL, NULL, 5);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Co delas?', NULL, NULL, 4);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Co delas?', NULL, NULL, 3);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Co delas?', NULL, NULL, 2);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Co delas?', NULL, NULL, 1);
INSERT INTO zprava(id, cas_odeslani, misto_odeslani, obsah, spravce_rodne_cislo_odeslal, spravce_rodne_cislo_odstranil, uzivatel_id)
VALUES(NULL, TIMESTAMP '2020-07-30 12:00:00.00', 'Brno', 'Co delas?', NULL, NULL, 2);

INSERT INTO akce_na_stene(uzivatel_id, akce_id)
VALUES(1, 1);

INSERT INTO clovek_v_konverzaci(uzivatel_id, konverzace_id)
VALUES(2, 1);
INSERT INTO clovek_v_konverzaci(uzivatel_id, konverzace_id)
VALUES(1, 1);
INSERT INTO clovek_v_konverzaci(uzivatel_id, konverzace_id)
VALUES(4, 1);
INSERT INTO clovek_v_konverzaci(uzivatel_id, konverzace_id)
VALUES(4, 2);

INSERT INTO je_oznacen(uzivatel_id, prispevek_id)
VALUES(2,1);
INSERT INTO je_oznacen(uzivatel_id, prispevek_id)
VALUES(3,1);
INSERT INTO je_oznacen(uzivatel_id, prispevek_id)
VALUES(4,1);
INSERT INTO je_oznacen(uzivatel_id, prispevek_id)
VALUES(5,1);

INSERT INTO je_pritelem(uzivatel_id1, uzivatel_id2) 
VALUES(1,2);

INSERT INTO porada(uzivatel_id, akce_id)
VALUES(1,1);

INSERT INTO prispevek_na_stene(uzivatel_id, prispevek_id)
VALUES(1,1);
INSERT INTO prispevek_na_stene(uzivatel_id, prispevek_id)
VALUES(3,2);

INSERT INTO zprava_v_konverzaci(zprava_pk, konverzace_id) 
VALUES(1,1);
INSERT INTO zprava_v_konverzaci(zprava_pk, konverzace_id) 
VALUES(2,1);

INSERT INTO zucastni_se(uzivatel_id, akce_id) 
VALUES(2,1);

-------------------------------------------------------------
-- 4. Faze - Vytvoreni pokrocilych objektu schematu databaze
-------------------------------------------------------------

--## ZADANI: ###########################################################################
--Zadefinovat ci vytvorit pokrocila omezeni ci objekty databaze dle upresnujicich pozadavku zadani
--dale skript bude obsahovat ukazkove prikazy manipulace dat a dotazy demonstrujici pouziti vyse zminenych omezeni a objektu
--pri pouziti EXPLAIN PLAN napred zavolat na dotaz bez indexu a pote vytvorit index a zavolat znovu EXPLAIN PLAN s indexem

--# 1. ####################################################################################
--Musi obsahovat:
--Vytvoreni alespon dvou netrivialnich databazovych triggeru vc, jejich predvedeni, z toho prave jeden pro automaticke
--generovani hodnot primarniho klice

--trigger smaze pri smazani uzivatele vsechny zaznamy ktere ho obsahuji
CREATE OR REPLACE TRIGGER nuluj_uzivatele
    AFTER DELETE ON uzivatel
    FOR EACH ROW
BEGIN
        DELETE FROM clovek_v_konverzaci
        WHERE uzivatel_id = :old.id;
        DELETE FROM je_oznacen
        WHERE uzivatel_id = :old.id;
        DELETE FROM zprava
        WHERE uzivatel_id = :old.id;
        DELETE FROM zucastni_se
        WHERE uzivatel_id = :old.id;
END;
/

--demonstrace mazani uzivatele a zaznamu o nem
SELECT * FROM uzivatel;
SELECT * FROM clovek_v_konverzaci;
SELECT * FROM je_oznacen;
SELECT * FROM zprava;
SELECT * FROM zucastni_se;

DELETE FROM uzivatel WHERE id = 4;

SELECT * FROM uzivatel;
SELECT * FROM clovek_v_konverzaci;
SELECT * FROM je_oznacen;
SELECT * FROM zprava;
SELECT * FROM zucastni_se;

-- Druhy trigger je pred vkladanim do tabulek vyse v kodu
-- Jeho demonstraci lze videt o par radku vyse v SELECT * FROM zprava, kde vidime ze zpravy jsou opravdu postupne cislovane

--# 2. ####################################################################################

--vytvoreni alespon dvou netrivialnich ulozenych procedur vcerne jejich predvedeni ve kterych se musi vyskytovat: kurzor, osetreni
--vyjimek a pouziti promenne s datovym typem odkazujicim radek nebo typ sloupce tabulky

--procedura prida do databaze parametrem zadany pocet uzivatelu pro testovaci ucely (mohou se opakovat)
CREATE OR REPLACE PROCEDURE vygeneruj_uzivatele(x IN number) AS 
BEGIN
    DECLARE
        r pls_integer;
        i number;
        wrong_value EXCEPTION;
    BEGIN
    IF x < 1 THEN
        RAISE wrong_value;
    END IF;
    FOR i in 0 .. x LOOP
        r := dbms_random.value(1,3);
        IF r = 1 THEN
            INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
            VALUES(NULL, 'Pepa', 'Nov√°k', 'josev.novak@gmail.com', TIMESTAMP '1990-06-03 00:00:00', TIMESTAMP '2020-03-22 11:15:50', 'Maturita', 'Student', '0', '9206031109', 'Novakova', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');
        END IF;
        IF r = 2 THEN
            INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
            VALUES(NULL, 'Lukas', 'Pataj', 'lukas.pataj@seznam.cz', TIMESTAMP '1980-05-01 00:00:00', TIMESTAMP '2020-03-20 09:11:05', 'Zakladne', 'Nezamestnany', '0', NULL, 'Stavebna', '84', '00123', 'Praha venkov', 'Ceska Republika', '00420123123');
        END IF;
        IF r = 3 THEN
            INSERT INTO uzivatel(id, jmeno, prijmeni, email, datum_narozeni, datum_vytvoreni_uctu, dosazene_vzdelani, zamestnani, zadany, rodne_cislo, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, telefon) 
            VALUES(NULL, 'John', 'Mayer', 'john.mayer@gmail.com', TIMESTAMP '1990-05-01 00:00:00', TIMESTAMP '2020-01-20 09:11:05', 'Maturita', 'Kytarista', '0', NULL, 'Road 66', '54', '00321', 'Austin', 'USA', '00420123123');
        END IF;
    END LOOP;
    EXCEPTION 
        WHEN wrong_value THEN 
        DBMS_OUTPUT.put_line('Neni mozne pridat mene nez jednoho uzivatele!');
    END;
END; 
/

--test procedury
SELECT * FROM uzivatel;
EXECUTE vygeneruj_uzivatele(4);
SELECT * FROM uzivatel;
--test vyjimky
EXECUTE vygeneruj_uzivatele(-1);

-- pokud John Rambo neni spravce, pridej ho jako spravce
CREATE OR REPLACE PROCEDURE vygeneruj_spravce AS 
BEGIN
DECLARE
-- promenna s datovym typem odkazujici na polozku v tabulce
CURSOR c1 IS
      SELECT rodne_cislo FROM spravce WHERE spravce.jmeno = 'John' and spravce.prijmeni='Rambo' ;
rc c1%ROWTYPE;
BEGIN
    UPDATE spravce SET
        zeme = 'USA'
    WHERE spravce.jmeno = 'John' and spravce.prijmeni='Rambo' ;
    IF sql%notfound THEN
        INSERT INTO spravce(rodne_cislo, jmeno, prijmeni, telefon, email, ulice, cislo_domu, smerovaci_cislo, mesto, zeme, pravomoc)
        VALUES('8806021147', 'John', 'Rambo', '+420 255 542', 'john.rambo@usa.com', 'Arizona', '4/2', '0096', 'Brno', 'USA', 'admin');
    END IF;
 END;
END; 
/

--test
SELECT * FROM spravce;
EXECUTE vygeneruj_spravce;
SELECT * FROM spravce;
EXECUTE vygeneruj_spravce;
SELECT * FROM spravce;

--# 3. ####################################################################################
--explicitni vytvoreni alespon jednoho indexu tak aby pomohl optimalizovat zpracovani dotazu

-- Vytvoreni indexu pro urychleni vyhledavani uzivatele podle jeho jmena a prijmeni
CREATE INDEX ix_user_name
ON uzivatel(jmeno, prijmeni);

-- Ted dotaz SELECT pouziva index 'ix_user_name' na vyhledani uzivatele
SELECT
    id,
    jmeno,
    prijmeni
FROM
    uzivatel
WHERE
    jmeno = 'Lukas' AND
    prijmeni = 'Pataj';

DROP INDEX ix_user_name;

--# 4. ####################################################################################
--alespon jedno pouziti EXPLAIN PLAN pro vypis planu provedeni databazoveho dotazu se spojenim alespon dvou tabulek, 
--agregacni funkci a klauzuli group by, musi byt uvedeno v dokumentaci

-- Dotaz se spojen√≠m aspo≈à dvou tabulek, agregaƒçn√≠ funkc√≠ a klauzul√≠ GROUP BY
EXPLAIN PLAN FOR
      SELECT uzivatel.id, zprava.obsah, COUNT(*) AS pocet_zprav
      FROM uzivatel, zprava
      WHERE uzivatel.id = zprava.uzivatel_id
      GROUP BY uzivatel.id, zprava.obsah;       
SELECT plan_table_output FROM table (dbms_xplan.display());
    
CREATE INDEX ix_user_message ON zprava(obsah, uzivatel_id);

EXPLAIN PLAN FOR
      SELECT uzivatel.id, zprava.obsah, COUNT(*) AS pocet_zprav
      FROM uzivatel, zprava
      WHERE uzivatel.id = zprava.uzivatel_id
      GROUP BY uzivatel.id, zprava.obsah;       
SELECT plan_table_output FROM table (dbms_xplan.display());

DROP INDEX ix_user_message;

-- EXPLAIN PLAN

--# 5. ####################################################################################
--definice pristupovych prav k databazovym objektum pro druheho clena tymu - prava pro admina
GRANT ALL ON uzivatel TO xpokor78;
GRANT ALL ON zprava TO xpokor78;
GRANT ALL ON prispevek TO xpokor78;
GRANT ALL ON fotografie TO xpokor78;
GRANT ALL ON album_fotek TO xpokor78;
GRANT ALL ON akce TO xpokor78;
GRANT ALL ON konverzace TO xpokor78;

-- proceduri
GRANT EXECUTE ON vygeneruj_uzivatele TO xpokor78;
GRANT EXECUTE ON vygeneruj_spravce TO xpokor78;

--# 6. ####################################################################################

--vytvoren alespon jeden materializovany pohled patrici druhemu clenu tymu a pouzivajici tabulky definovane prvnim celnem tymu
--vcetne SQL ukazujici jak materializovany pohled funguje

DROP MATERIALIZED VIEW uzivatel_zprava;
-- LOGY
CREATE MATERIALIZED VIEW LOG ON uzivatel WITH PRIMARY KEY, ROWID;
CREATE MATERIALIZED VIEW LOG ON zprava WITH PRIMARY KEY, ROWID;


CREATE MATERIALIZED VIEW uzivatel_zprava
  NOLOGGING
  CACHE
  BUILD IMMEDIATE
  REFRESH FAST ON COMMIT
  ENABLE QUERY REWRITE
AS
SELECT uzivatel.rowid AS uzivatel_rid, zprava.rowid AS zprava_rid,
cas_odeslani, misto_odeslani, obsah, uzivatel_id
FROM uzivatel JOIN zprava ON uzivatel.id = zprava.uzivatel_id;

GRANT ALL ON uzivatel_zprava TO xpokor78;

-- overenie funkcnosti
-- vypis pohledu
SELECT cas_odeslani, misto_odeslani, obsah, uzivatel_id
FROM uzivatel_zprava;

-- vlozenie novych dat do zpravy
INSERT INTO zprava (cas_odeslani, misto_odeslani, obsah, uzivatel_id)
VALUES (('15-JAN-2019 12:30:00.00'), 'Mesiac', 'Toto je zprava', 1);

-- pridanie noveho dotazu do pohledu
COMMIT;
SELECT cas_odeslani, misto_odeslani, obsah, uzivatel_id
FROM uzivatel_zprava;

-- odstraneni spravy
DELETE FROM zprava 
WHERE obsah = 'Toto je zprava';

-- pridanie dotazu do pohledu
COMMIT;
SELECT cas_odeslani, misto_odeslani, obsah, uzivatel_id
FROM uzivatel_zprava;


        

